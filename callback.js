// ********–∫–æ–ª–±–µ–∫—Ñ—É–Ω–∫—Ü–∏–∏
// function greet(name) {
//     return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${name}.`;
//   }

//   // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é greet –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
//   console.log(greet("–ú–∞–Ω–≥–æ")); // –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–Ω–≥–æ.

//   // –í—ã–≤–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é greet –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–µ –≤—ã–∑—ã–≤–∞—è –µ–µ
//   console.log(greet); // ∆í greet() { return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${name}.`; }

// function processCall(recipient) {
//     //–ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º
//     const isRecipientAvailable = Math.random() > 0.5;

//     if (!isRecipientAvailable) {
//       console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${recipient} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
//       // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
//     } else {
//       console.log(`–°–æ–µ–¥–∏–Ω—è–µ–º —Å ${recipient}, –æ–∂–∏–¥–∞–π—Ç–µ...`);
//       // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
//     }
//   }

//   processCall("–ú–∞–Ω–≥–æ");

// function processCall(recipient, onAvailable, onNotAvailable) {
//     //–ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º
//     const isRecipientAvailable = Math.random() > 0.5;

//     if (!isRecipientAvailable) {
//       onNotAvailable(recipient);
//       return;
//     }

//     onAvailable(recipient);
//   }

//   function takeCall(name) {
//     console.log(`–°–æ–µ–¥–∏–Ω—è–µ–º —Å ${name}, –æ–∂–∏–¥–∞–π—Ç–µ...`);
//     // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
//   }

//   function activateAnsweringMachine(name) {
//     console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
//     // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
//   }

//   function leaveHoloMessage(name) {
//     console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–≥—Ä–∞–º–º—É.`);
//     // –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã
//   }

//   processCall("–ú–∞–Ω–≥–æ", takeCall, activateAnsweringMachine);
//   processCall("–ü–æ–ª–∏", takeCall, leaveHoloMessage);

// function repeatLog(n) {
//     for (let i = 0; i < n; i += 1) {
//       console.log(i);
//     }
//   }

//   repeatLog(5);

// ***********—Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è*********************//

// // function declaration
// /**
//  * buy product,log message with purchase info
//  * @param {String} productName
//  * @param {Number} productQty
//  * @param {Number} price
//  */
//function buyProduct(productName, productQty, price) {
//     console.log(`You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${productQty * price}`);
// //}
// buyProduct('apple',10, 35);

// // function expression

// const buyProduct = function (productName, productQty, price) {
//     console.log(`You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${productQty * price}`);
// }

//arrow function

// const buyProduct = ( productName, productQty, price) => {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`
//   );
// };
// buyProduct('apple',10, 35);

// /**
//  * Get product total price
//  * @param {Number} qty - quantity items
//  * @param {Number} price - price per item
//  * @returns {Number} - total price
//  */

// const getTotalPrice = (qty, price) => {
//     return qty * price;
// };

//–Ω–µ—è–≤–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ

// const getTotalPrice = (qty, price) => qty *price
// console.log(getTotalPrice(3, 150));

// *****–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–º–µ—Ç—Ä—ã –≤ –∫—Ä—É–≥–ª—ã–µ
// —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–º–µ—Ç—Ä –æ–¥–∏–Ω ******//
// –æ–¥–∏–Ω –ø–∞—Ä–∞–º–º–µ—Ç—Ä –±–µ–∑ —Å–∫–æ–±–æ–∫

/**
 * check user strong password
 * @param {String} password
 * @returns {Boolean}
 */
// const checkPassword = password => password === "qwerty111";
// console.log(checkPassword('qwerty111'));

// –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–º–µ—Ç—Ä —Ç–æ–≥–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏

// **********–æ—Ç—Å—É—Ç—Å–≤–∏—Ç–µ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞ arguments***************//
// function declaration

/**
 * log items
 */
// function getProductList(){
//     console.log(arguments);
//     for(const product of arguments) {
//         console.log(product)
//     }
// };
// getProductList('Apple' ,'Banana', 'Orange', 'Mango')
// getProductList('Apple' ,'Banana', 'Orange', 'Mango', 'Watermelon')

// arrow function
// const getProductList = (...args) => {
//     console.log(args)

// };

// getProductList('Apple' ,'Banana', 'Orange', 'Mango')
// getProductList('Apple' ,'Banana', 'Orange', 'Mango', 'Watermelon')

// ***********Callback function****************\\

// *******Callback —Ñ—É–Ω–∫—Ü—ñ—è —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó*****\\

// function add(a, b) {
// return a+ b
// }
// function sum(a,b){

// }

// function logResult (a, b){

//     const result = add(a, b);
//     console.log(`Result is ${result}`);
// }
// logResult(4, 5)

// function logResult(a,b ,callback) {
//     console.log(callback);
//     const result = callback(a, b);
//     console.log(`Result is ${result}`);
// }

// function add(a, b) {
//     return a+b
// }

// function sum (a, b) {
//     return a*b;
// }
// logResult(4,5,add);
// logResult(4,5,sum);

// inline callback function
// function logResult (a, b, callback) {
//     console.log(callback);
//     const result = callback(a,b);
//     console.log(`Result is ${result}`);
// }

// logResult(4, 5, function(a,b){
//     return a+b;
// })//–≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ function expression
// console.log(4, 5, (a, b) => a+b);
// console.log(4, 5, (a, b) => a*b);

// *********forEach*****************88
// const products = ['Apple' ,'Banana', 'Orange', 'Mango', 'Watermelon'];

// –¶–∏–∫–ª for
// for (let i = 0; i < products.length; i += 1){
//     const product = products[i];
//     console.log(`${i + 1} - ${product}`);
// }

// forEach –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å
// products.forEach((product, idx, arr)=> {
//     console.log(`${idx + 1}-${product}`);
//     console.log(arr);
// })

// const products = ["Apple", "Banana", "Orange", "Mango", "Banana", "Watermelon"];
// let isUniq = true;
// const check = (product, idx, arr) => {
//   if (isUniq) {
//     isUniq = arr.indexOf(product) === idx;
//   }
// };

// function customForEach(callback) {
//   for (let i = 0; i < products.length; i += 1) {
//     callback(products[i], i, products);
//   }
// }

// customForEach(check)
// // let isUniq = true;
// // const result = products.forEach(callback);
// console.log(isUniq);

// Task - 1
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
// const product = {
//     id:Date.now(),
//     ...obj
// }
// callback(product)
// }

// function logProduct(product) {
//     console.log(`Product`, product)
// }

// function logTotalPrice({ price, quantity }) {
// console.log(`Product total price ${price * quantity}`);
// }




// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);




// Task - 2


// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
//
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// function each(arr, action){
//     const items = [];

// //     arr.forEach((elem) => {
// // const result = action(elem);
// // DataTransferItemList.puch(result);
// //     });

// arr.forEach((elem) => items.push(action(elem)));

//     return items;
// }


// function each(arr, action){



// arr.forEach((elem, idx) => (arr[idx] = action(elem)));

//     return arr;
// }




// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)))


// Task-3
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback.
// –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.
// –£ –≤–∏–ø–∞–¥–∫—É —è–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

// const products = [
//   {
//     id: 1,
//     name: "–¢–µ–ª–µ—Ñ–æ–Ω",
//     price: 10000,
//     description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.",
//   },
//   {
//     id: 2,
//     name: "–ù–æ—É—Ç–±—É–∫",
//     price: 25000,
//     description: "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.",
//   },
//   {
//     id: 3,
//     name: "–ü–ª–∞–Ω—à–µ—Ç",
//     price: 8000,
//     description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
//   },
// ];

// function getProductDetails(id, success, error){
//  for(const product of products){
//     if( product.id === id){
//         return success(product);
//     }
//  }
// error(id);

// }




// getProductDetails(3, handleSuccess, handleError);
// getProductDetails(44, handleSuccess, handleError);


// function handleSuccess(message) {
//       console.log(`‚úÖ Success!`, message);
//     }
    
//     function handleError(productId) {
//       console.log(`‚ùå Error! Product with ${productId} id not found`);
//     }


// Task-4
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calculateAveragePrice, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –Ω–∞ –≤—Ö—ñ–¥ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ç–æ–≤–∞—Ä–∏, —Ç–∞ –∫–æ–ª–±–µ–∫–∏ onSuccess —Ç–∞ onError.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onSuccess, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –æ—Ç—Ä–∏–º–∞–Ω—É —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
// –Ø–∫—â–æ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onError, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Ä—è–¥–æ–∫ "No products found".
// –î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ toFixed(2), —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ —á–∏—Å–ª–æ –¥–æ –¥–≤–æ—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤.

// const products = [
//     { name: "Apple", price: 0.99 },
//     { name: "Banana", price: 0.49 },
//     { name: "Orange", price: 0.79 },
//     { name: "Mango", price: 1.99 },
//   ];
  
//   function calculateAveragePrice(products, onSuccess, onError) {
//     if(!products.length){//  0 => false + ! => true
// onError("No products found");
// return;
//     }

//     let total = 0;

//     products.forEach(({price}) =>( total += price));
//     onSuccess(total/ products.length);
//     }
  
  
  
//   const onSuccess = (averagePrice) => 
//   console.log('Avarage price:', averagePrice.toFixed(2));
    
  
//   const onError = (errorMessage) => console.log('Error:',errorMessage)
  
//   calculateAveragePrice(products, onSuccess, onError);